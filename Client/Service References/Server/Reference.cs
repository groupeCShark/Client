//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.Server {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogResult", Namespace="http://schemas.datacontract.org/2004/07/ServeurCShark")]
    [System.SerializableAttribute()]
    public partial class LogResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ConnectResField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] UserListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ConnectRes {
            get {
                return this.ConnectResField;
            }
            set {
                if ((this.ConnectResField.Equals(value) != true)) {
                    this.ConnectResField = value;
                    this.RaisePropertyChanged("ConnectRes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] UserList {
            get {
                return this.UserListField;
            }
            set {
                if ((object.ReferenceEquals(this.UserListField, value) != true)) {
                    this.UserListField = value;
                    this.RaisePropertyChanged("UserList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Auth", ReplyAction="http://tempuri.org/IService1/AuthResponse")]
        Client.Server.LogResult Auth(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Auth", ReplyAction="http://tempuri.org/IService1/AuthResponse")]
        System.Threading.Tasks.Task<Client.Server.LogResult> AuthAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StartSession", ReplyAction="http://tempuri.org/IService1/StartSessionResponse")]
        bool StartSession(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StartSession", ReplyAction="http://tempuri.org/IService1/StartSessionResponse")]
        System.Threading.Tasks.Task<bool> StartSessionAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Send", ReplyAction="http://tempuri.org/IService1/SendResponse")]
        bool Send(string Username, string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Send", ReplyAction="http://tempuri.org/IService1/SendResponse")]
        System.Threading.Tasks.Task<bool> SendAsync(string Username, string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EndSession", ReplyAction="http://tempuri.org/IService1/EndSessionResponse")]
        bool EndSession();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EndSession", ReplyAction="http://tempuri.org/IService1/EndSessionResponse")]
        System.Threading.Tasks.Task<bool> EndSessionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Logout", ReplyAction="http://tempuri.org/IService1/LogoutResponse")]
        void Logout();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Logout", ReplyAction="http://tempuri.org/IService1/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client.Server.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client.Server.IService1>, Client.Server.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.Server.LogResult Auth(string username) {
            return base.Channel.Auth(username);
        }
        
        public System.Threading.Tasks.Task<Client.Server.LogResult> AuthAsync(string username) {
            return base.Channel.AuthAsync(username);
        }
        
        public bool StartSession(string username) {
            return base.Channel.StartSession(username);
        }
        
        public System.Threading.Tasks.Task<bool> StartSessionAsync(string username) {
            return base.Channel.StartSessionAsync(username);
        }
        
        public bool Send(string Username, string Message) {
            return base.Channel.Send(Username, Message);
        }
        
        public System.Threading.Tasks.Task<bool> SendAsync(string Username, string Message) {
            return base.Channel.SendAsync(Username, Message);
        }
        
        public bool EndSession() {
            return base.Channel.EndSession();
        }
        
        public System.Threading.Tasks.Task<bool> EndSessionAsync() {
            return base.Channel.EndSessionAsync();
        }
        
        public void Logout() {
            base.Channel.Logout();
        }
        
        public System.Threading.Tasks.Task LogoutAsync() {
            return base.Channel.LogoutAsync();
        }
    }
}
