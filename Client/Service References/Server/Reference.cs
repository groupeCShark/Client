//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.Server {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogRes", Namespace="http://schemas.datacontract.org/2004/07/ServeurCShark")]
    [System.SerializableAttribute()]
    public partial class LogRes : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ConnectResField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] UserListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ConnectRes {
            get {
                return this.ConnectResField;
            }
            set {
                if ((this.ConnectResField.Equals(value) != true)) {
                    this.ConnectResField = value;
                    this.RaisePropertyChanged("ConnectRes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] UserList {
            get {
                return this.UserListField;
            }
            set {
                if ((object.ReferenceEquals(this.UserListField, value) != true)) {
                    this.UserListField = value;
                    this.RaisePropertyChanged("UserList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/auth", ReplyAction="http://tempuri.org/IService1/authResponse")]
        Client.Server.LogRes auth(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/auth", ReplyAction="http://tempuri.org/IService1/authResponse")]
        System.Threading.Tasks.Task<Client.Server.LogRes> authAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/startSession", ReplyAction="http://tempuri.org/IService1/startSessionResponse")]
        bool startSession(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/startSession", ReplyAction="http://tempuri.org/IService1/startSessionResponse")]
        System.Threading.Tasks.Task<bool> startSessionAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/send", ReplyAction="http://tempuri.org/IService1/sendResponse")]
        bool send(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/send", ReplyAction="http://tempuri.org/IService1/sendResponse")]
        System.Threading.Tasks.Task<bool> sendAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/endSession", ReplyAction="http://tempuri.org/IService1/endSessionResponse")]
        bool endSession();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/endSession", ReplyAction="http://tempuri.org/IService1/endSessionResponse")]
        System.Threading.Tasks.Task<bool> endSessionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/logout", ReplyAction="http://tempuri.org/IService1/logoutResponse")]
        void logout();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/logout", ReplyAction="http://tempuri.org/IService1/logoutResponse")]
        System.Threading.Tasks.Task logoutAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client.Server.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client.Server.IService1>, Client.Server.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.Server.LogRes auth(string username) {
            return base.Channel.auth(username);
        }
        
        public System.Threading.Tasks.Task<Client.Server.LogRes> authAsync(string username) {
            return base.Channel.authAsync(username);
        }
        
        public bool startSession(string username) {
            return base.Channel.startSession(username);
        }
        
        public System.Threading.Tasks.Task<bool> startSessionAsync(string username) {
            return base.Channel.startSessionAsync(username);
        }
        
        public bool send(string message) {
            return base.Channel.send(message);
        }
        
        public System.Threading.Tasks.Task<bool> sendAsync(string message) {
            return base.Channel.sendAsync(message);
        }
        
        public bool endSession() {
            return base.Channel.endSession();
        }
        
        public System.Threading.Tasks.Task<bool> endSessionAsync() {
            return base.Channel.endSessionAsync();
        }
        
        public void logout() {
            base.Channel.logout();
        }
        
        public System.Threading.Tasks.Task logoutAsync() {
            return base.Channel.logoutAsync();
        }
    }
}
